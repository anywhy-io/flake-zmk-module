#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        bt_sel_3 {
            bindings = <&bt3>;
            key-positions = <42 30>;
            layers = <2>;
        };

        bt_sel_4 {
            bindings = <&bt4>;
            key-positions = <30 18>;
            layers = <2>;
        };

        enter_gaming {
            bindings = <&sl 3>;
            key-positions = <26 15 28>;
            layers = <2>;
        };

        leave_gaming {
            bindings = <&sl 0>;
            key-positions = <31 20 33>;
            layers = <4>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <13 25>;
            layers = <3>;
        };
    };

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GREATER_THAN>;
            label = "ARROW";
        };

        eqeq: eqeq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL>;
            label = "EQEQ";
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

	omt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
	    quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            display-name = "Mod-Tap";
        };

	olt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
	    quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &kp B     &kp L     &kp D      &kp W        &kp V     &kp SEMI               &kp F            &kp O      &kp U     &kp J
  &kp N     &kp R     &kp T      &kp S        &kp G     &kp Y                  &kp H            &kp A      &kp E     &kp I
  &kp Q     &kp X     &kp M      &kp C        &kp Z     &kp K                  &kp P            &kp COMMA  &kp DOT   &kp FSLH
  &kp LGUI  &kp LALT  &kp LCTRL  &olt 1 SPACE  &gresc    &omt RIGHT_SHIFT ENTER  &olt 2 BACKSPACE  &kp LGUI   &kp LALT  &kp LCTRL
            >;
        };

        num {
            bindings = <
  &kp ESC     &kp BACKSPACE  &kp TAB     &kp ENTER    &kp DEL     &kp SINGLE_QUOTE  &kp N7           &kp N8  &kp N9  &kp MINUS
  &kp LGUI    &kp LALT       &kp LCTRL   &kp LSHFT    &kp LBKT    &kp EQUAL         &kp N4           &kp N5  &kp N6  &kp N0
  &kp K_UNDO  &kp K_CUT      &kp K_COPY  &kp K_PASTE  &kp RBKT    &kp GRAVE         &kp N1           &kp N2  &kp N3  &kp BSLH
  &trans      &trans         &trans      &trans       &none       &kp ENTER         &kp RIGHT_SHIFT  &trans  &trans  &trans
            >;
        };

        fn {
            bindings = <
  &kp EXCLAMATION   &kp UNDERSCORE     &kp LESS_THAN         &kp GREATER_THAN       &soft_off         &bt2   &kp C_MUTE      &kp C_VOL_DN    &kp C_VOL_UP  &kp K_LOCK
  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &caps_word        &bt1   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT
  &kp PIPE          &kp AMPERSAND      &eqeq                 &arrow                 &studio_unlock    &bt0   &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END
  &trans            &trans             &trans                &kp SPACE              &kp LEFT_GUI      &none  &trans          &trans          &trans        &trans
            >;
        };
    };
};
