#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define MO_TOG(layer) &mo_tog layer layer   // Macro to apply momentary-layer-on-hold/toggle-layer-on-tap to a specific layer

/ {

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
            label = "BT_CLR_0";
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
            label = "BT_CLR_1";
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
            label = "BT_CLR_2";
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
            label = "BT_CLR_3";
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
            label = "BT_CLR_4";
        };

        prttog: print_and_tog{
            compatible = "zmk,behavior-macro";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp N9>, <&tog>;
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT0";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT1";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT2";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT3";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            label = "BT4";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        taskman: task_manager {
            compatible = "zmk,behavior-mod-morph";
            label = "TASKMAN";
            bindings = <&kp ESC>, <&kp LS(LC(ESC))>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&print_and_tog>;
        };
    };

    keymap {
        #define QWERTY  0
        #define ENGRAM  1
        #define NUMNAV  2
        #define FUNC    3

        compatible = "zmk,keymap";

        base {
            bindings = <
&taskman    &kp N1  &kp N2      &kp N3    &kp N4    &kp N5                              &kp N6          &kp N7  &kp N8      &kp N9    &kp N0    &kp DEL
&kp TAB     &kp Q   &kp W       &kp E     &kp R     &kp T                               &kp Y           &kp U   &kp I       &kp O     &kp P     &kp MINUS
&none       &kp A   &kp S       &kp D     &kp F     &kp G                               &kp H           &kp J   &kp K       &kp L     &kp SEMI  &kp APOS
&kp LCTRL   &kp Z   &kp X       &kp C     &kp V     &kp B                               &kp N           &kp M   &kp COMMA   &kp DOT   &kp FSLH  MO_TOG(FUNC)
    &mo NUMNAV  &kp LGUI  &kp LALT  &mt LSHIFT SPACE        &kp BSPC          &kp RET       &mt LSHIFT BSLH &none   &kp LBKT    &kp RBKT
    MO_TOG(NUMNAV)  &kp LGUI  &kp LALT  &mt LSHIFT SPACE        &kp BSPC          &kp RET       &kp BSLH  &none  &kp LBKT  &kp RBKT
            >;
        };

        engram {
            bindings = <
&kp ESC    &kp N1  &kp N2    &kp N3    &kp N4     &kp N5            &kp N6  &kp N7     &kp N8     &kp N9    &kp N0     &kp MINUS
&kp ENTER  &kp Q   &kp W     &kp E     &kp R      &kp T             &kp Y   &kp U      &kp I      &kp O     &kp P      &kp BSPC
&kp TAB    &kp A   &kp S     &kp D     &kp F      &kp G             &kp H   &kp J      &kp K      &kp L     &kp SEMI   &kp APOS
&kp LBKT   &kp Z   &kp X     &kp C     &kp V      &kp B             &kp N   &kp M      &kp COMMA  &kp DOT   &kp FSLH   &kp RBKT
                   &kp LGUI  &kp LALT  &kp LCTRL  &kp SPACE  &mo 1  &mo 2   &kp LSHFT  &kp LGUI   &kp LALT  &kp LCTRL
            >;
        };

        num {
            bindings = <
&trans  &none   &none   &none   &none   &none                   &none   &none   &kp KP_SLASH    &kp KP_ASTERISK &kp KP_MINUS    &none
&none   &none   &none   &none   &none   &none                   &none   &kp N7  &kp N8          &kp N9          &kp KP_PLUS     &none
&none   &none   &none   &none   &none   &none                   &none   &kp N4  &kp N5          &kp N6          &kp KP_PLUS     &none
&none   &none   &none   &none   &none   &none                   &none   &kp N1  &kp N2          &kp N3          &kp KP_EQUAL    &trans
                &trans  &trans  &trans  &trans  &none  &none    &trans  &kp N0  &kp N0          &kp KP_DOT
            >;
        };

        fn {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                          &kp F6  &kp F7          &kp F8      &kp F9          &kp F10         &kp F11
&bt0    &bt2    &none   &none   &none   &soft_off                       &none   &out OUT_USB    &none       &out OUT_TOG    &none           &kp F12
&bt1    &bt3    &none   &none   &none   &none                           &none   &none           &none       &none           &none           &none
&trans  &none   &none   &none   &none   &out OUT_BLE                    &none   &kp LEFT        &kp UP      &kp RIGHT       &studio_unlock  &trans
                &trans  &trans  &trans  &trans          &none   &none   &trans  &kp HOME        &kp DOWN    &kp END
            >;
        };
    };
};
